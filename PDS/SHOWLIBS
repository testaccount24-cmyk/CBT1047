/* REXX    SHOWLIBS   Display table DSINDX that contains a list of
                      all the members of all users.
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20230928

     Impact Analysis
.    SYSEXEC   KVW
.    SYSEXEC   MEMLIST
.    SYSEXEC   TRAPOUT

     Modification History
     20231006 fxc display as-of date;
     20231008 fxc rearrange calls;
     20231010 fxc better comments;
     20231017 fxc re-work to accomodate any specified crossreference
                  table;
     20231116 fxc add HELP prompt on panel;
     20240305 fxc align panel names;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240404 fxc reformat )ATTR sections;
     20240407 fxc prompt for missing parms;
     20240415 fxc DUMP_QUEUE quiet;

*/ arg argline
address TSO                            /* REXXSKEL ver.20230722      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
                                    if \sw.0error_found then,
call I_ISPF_OPS                        /* Table manipulation        -*/

if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit                                   /*@ SHOWLIBS                  */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse value ''   with  dsn.  ddnlist
   @xrf@    = KEYWD( "FROM" )
   if @xrf@ = '' then do
/*    helpmsg = "Input table specification is required." */
      sw.0NoFrom = 1
      end

   isptlib  = KEYWD( "ISPTLIB" )
   if isptlib = '' then do
/*    helpmsg = "Input table library is required." */
      sw.0NoTlib = 1
      end

   if sw.0NoFrom + sw.0NoTlib > 0 then call AP_GET_PARMS /*         -*/

   if Left( isptlib,1 ) = "'" then,
      isptlib = Strip( isptlib,,"'" )  /* unquoted                   */
   else,
      isptlib = Userid()"."isptlib     /* fully qualified            */
   openmode.   = "WRITE"
   openmode.1  = "NOWRITE"

return                                 /*@ A_INIT                    */
/*
   One or more required parms are absent.  Prompt.
.  ----------------------------------------------------------------- */
AP_GET_PARMS:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call IA_PROLOG                      /* Setup                     -*/
   do forever
      "DISPLAY PANEL( PARMS )"
      if rc > 0 then leave             /* PF3 ?                      */

      if isptlib <> '' & @xrf@ <> '' then do
         isptlib = Strip( isptlib,,"'" )
         if Sysdsn( "'"isptlib"("@xrf@")'" ) <> "OK" then do
            zerrlm = "'"isptlib"("@xrf@")' is invalid "
            zerrsm = ''
            "SETMSG MSG( ISRZ002 )"
            iterate
            end                        /* Sysdsn                     */
         else leave                    /* good combination!          */
         end                           /* both filled                */
   end                                 /* forever                    */

   if isptlib = '' | @xrf@ = '' then sw.0Error_Found = 1
   isptlib  = "'"isptlib"'"            /* A_INIT will strip quotes   */

return                                 /*@ AP_GET_PARMS              */
/*
.  ----------------------------------------------------------------- */
I_ISPF_OPS:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call IA_PROLOG                      /* Setup                     -*/
                                    if \sw.0error_found then,
   call ID_DISPLAY                     /* Display DSIDX             -*/
   call IZ_EPILOG                      /* Tear-down                 -*/

return                                 /*@ I_ISPF_OPS                */
/*
   Set up envronment
.  ----------------------------------------------------------------- */
IA_PROLOG:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if ddnlist <> '' then return        /* already done               */
   call DEIMBED                        /* Extract ISPF assets       -*/
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd

return                                 /*@ IA_PROLOG                 */
/*
   Display DSIDX
.  ----------------------------------------------------------------- */
ID_DISPLAY:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call IDA_OPEN_TBL                   /* Open DSIDX                -*/
                                    if sw.0error_found then return

   "TBVCLEAR" @xrf@                    /* zap all variables          */
   dsmbr = " "                         /* blank                      */
   "TBSARG" @xrf@ "NAMECOND(DSMBR,GT)"

   do forever
      sel = ""
      "TBDISPL" @xrf@ "PANEL( MBRLIST )"
       if rc > 4 then leave

      if zcmd <> "" then do
         "CONTROL DISPLAY SAVE"
         parse var zcmd  verb  text
         upper verb
         dsmbr2 = dsmbr
         if verb = "LIBS"  then ,
            call IDI_INVENTORY         /*                           -*/
         else,
         if verb = "L"  then ,
            call IDL_LOCATE            /*                           -*/
         else,
         if verb = "SHOW" then ,
            call IDT_TABLES            /*                           -*/
         "CONTROL DISPLAY RESTORE"
         iterate
         end

      do ztdsels
         "CONTROL DISPLAY SAVE"
         dsmbr2 = dsmbr
         if Pos( sel,'sS' ) > 0 then do       /* KVW this member     */
            call IDS_KVW_MEMBER        /*                           -*/
            end                        /* S                          */
         else,
         if Pos( sel,'vV' ) > 0 then do       /* VIEW datasets       */
            call IDV_VIEW_DSNS         /*                           -*/
            end                        /* V                          */
         "CONTROL DISPLAY RESTORE"

         if ztdsels > 1 then "TBDISPL" @xrf@
      end                              /* ztdsels                    */

   end                                 /* forever                    */
   "TBEND"  @xrf@

return                                 /*@ ID_DISPLAY                */
/*
   Open @xrf@.  Read the admin row.
.  ----------------------------------------------------------------- */
IDA_OPEN_TBL:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTLIB  DATASET  ID( '"isptlib"' )  STACK"
   "TBSTATS" @xrf@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @xrf@ "not available."
      zerrlm = "Table" @xrf@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @xrf@  openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @xrf@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         sw.0error_found = "1"; return
         end
      end
   else "TBTOP" @xrf@
   "LIBDEF  ISPTLIB"

   /* Read the ADMIN row                                             */
   dsmbr = '3f3f'x                     /* less than blank            */
   "TBGET" @xrf@ "SAVENAME( XVARS )"   /* load all extensions        */
   parse var xvars "(" xvars ")"       /* peel bananas               */
   dsn.0   = 0
   do Words( xvars )
      parse var xvars  w1  xvars
      if Left( w1,1 ) = 'D' then do
         parse var w1 'D' wx           /* strip D                    */
         zz = Value( 'DSN.'wx, Value( w1 ) )   /* load DSN           */
         dsn.0 = dsn.0 + 1
         end                           /* D                          */
   end                                 /* xvars                      */

return                                 /*@ IDA_OPEN_TBL              */
/*
   Show all datasets involved.
.  ----------------------------------------------------------------- */
IDI_INVENTORY:                         /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dsmbr = "(any)"
   "TBCREATE  @TMP@  NAMES( DSID TMPDSN ) NOWRITE REPLACE"
   do idx = 1 to dsn.0                 /* each DSN                   */
      dsid    = Right( idx,4,0 )
      tmpdsn  = dsn.dsid
      "TBADD   @TMP@ "
   end                                 /* idx                        */

   "TBTOP  @TMP@ "
   do forever
      sel = ""
      "TBDISPL  @TMP@  PANEL( DSDISPL )"
       if rc > 4 then leave

      do ztdsels
         "CONTROL DISPLAY SAVE"
         address TSO "MEMLIST '"tmpdsn"'  V "
         "CONTROL DISPLAY RESTORE"

         if ztdsels > 1 then "TBDISPL  @TMP@ "
      end                              /* ztdsels                    */

   end                                 /* forever                    */
   "TBEND   @TMP@ "

return                                 /*@ IDI_INVENTORY             */
/*
   Position cursor to member
.  ----------------------------------------------------------------- */
IDL_LOCATE:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBVCLEAR" @xrf@                    /* zap all variables          */
   @z@ = Value("DSMBR",text"*")        /* load search value          */
   "TBSCAN" @xrf@ "ARGLIST( DSMBR )",  /* set ROWFND  if successful  */
                 "CONDLIST( GE ) ROWID(ROWFND) "
   if rc = 8 then do                   /* not found                  */
      zerrsm = "Not found"
      zerrlm = "No rows found to match" text
      zerrlm = exec_name "("BRANCH("ID")")",
               zerrlm
      address ISPEXEC "SETMSG  MSG(ISRZ002)"
      return
      end                              /* not found                  */
   "TBSKIP" @xrf@ "ROW("rowfnd") NOREAD"    /* position to LASTFND   */

return                                 /*@ IDL_LOCATE                */
/*
   Display all occurrences of <dsmbr>
.  ----------------------------------------------------------------- */
IDS_KVW_MEMBER:                        /*@                           */
   if branch then call BRANCH
   address TSO

   parse var dsmbr  vwmbr "("
   parse value ""   with ,
               w1  dslist
   do Words( dsindx )                  /* collect DSNs               */
      parse value dsindx     with w1 dsindx
      dsn   = "'"dsn.w1"'"
      dslist = dslist dsn
   end                                 /* dsindx                     */
   "ALLOC  FI( @TMP ) DA( "dslist" ) SHR REU "
   "KVW  @TMP( "vwmbr" )"

return                                 /*@ IDS_KVW_MEMBER            */
/*
   Show the tables that were used to create the current @xrf@ table.
   Two extension variables, UTBL and TTBL, name the USERTBL and
   TYPETBL respectively.  Both will exist in the current ISPTLIB
   library.
.  ----------------------------------------------------------------- */
IDT_TABLES:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   parse var text  @tag  .             /* UTBL or TTBL               */
   if WordPos( @tag,"USERS TYPES" ) = 0 then return
   if @tag = "USERS" then,
      parse value utbl "DSPUSER"  with ,
                  @tbl@ panelid .
   else,
      parse value ttbl "DSPTYPE"  with ,
                  @tbl@ panelid .

   "LIBDEF  ISPTLIB  DATASET  ID( '"isptlib"' )  STACK"
   "TBSTATS" @tbl@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tbl@ "not available."
      say   zerrsm
      zerrlm = "Table" @tbl@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tbl@  openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tbl@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         end
      end
   else "TBTOP" @tbl@
   "LIBDEF  ISPTLIB"

   do forever
      "TBDISPL" @tbl@ "PANEL(" panelid ")"
      if rc > 0 then leave
   end                                 /* forever                    */

   "TBEND" @tbl@

return                                 /*@ IDT_TABLES                */
/*
   Show contents of selected member/datasets
.  ----------------------------------------------------------------- */
IDV_VIEW_DSNS:                         /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if Words( dsindx ) = 1 then do
      parse var dsindx w1 .
      tmpdsn  = dsn.w1
      "CONTROL DISPLAY SAVE"
      address TSO "MEMLIST '"tmpdsn"'  V "
      "CONTROL DISPLAY RESTORE"
      return                           /* we're done                 */
      end                              /* one DSN                    */

   "TBCREATE  @TMP@  NAMES( DSID TMPDSN ) NOWRITE REPLACE"
   do Words( dsindx )                  /*                            */
      parse value dsindx     with dsid dsindx
      tmpdsn  = dsn.dsid
      "TBADD   @TMP@ "
   end                                 /* dsindx                     */

   "TBTOP  @TMP@ "
   do forever
      sel = ""
      "TBDISPL  @TMP@  PANEL( DSDISPL )"
       if rc > 4 then leave

      do ztdsels
         "CONTROL DISPLAY SAVE"
         address TSO "MEMLIST '"tmpdsn"'  V "
         "CONTROL DISPLAY RESTORE"

         if ztdsels > 1 then "TBDISPL  @TMP@ "
      end                              /* ztdsels                    */

   end                                 /* forever                    */
   "TBEND   @TMP@ "

return                                 /*@ IDV_VIEW_DSNS             */
/*
   Tear down ISPF environment
.  ----------------------------------------------------------------- */
IZ_EPILOG:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ IZ_EPILOG                 */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
   Parse out the embedded components at the back of the source code.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW DELETE REU UNIT(SYSDA) SPACE(1 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR REU"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if length(ddn) > 4 then do    /* data, not ISPF             */
            call DESPOOL               /*                           -*/
            currln = currln - 1        /* previous line              */
            iterate
            end
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)  /* PLIB322 maybe              */
            @ddn.ddn = @ddn            /* @ddn.PLIB = PLIB322        */
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"
   return
/*
   Subroutine of DEIMBED for non-ISPF data.
   Given : the stack, ddn, and mbr
.  ----------------------------------------------------------------- */
DESPOOL:                               /*@                           */
   if branch then call BRANCH
   address TSO

   if WordPos( ddn,ddnlist ) = 0 then,
      ddnlist = Space( ddnlist ddn,1 )
   if Sysdsn(ddn".DATA") <> "OK" then,
      "ALLOC FI("ddn") DA("ddn".DATA)" fb80po.0
   "ALLOC FI("ddn") DA("ddn".DATA("mbr")) SHR REU"
   "EXECIO" queued() "DISKW" ddn "(FINIS"
   "DELSTACK"
   "NEWSTACK"                          /* re-establish               */

return                                 /*@ DESPOOL                   */

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */
say "                                                                          "
say "  "ex_nam"      displays the contents of any suitable crossreference table"
say "                (DSMBR-DSCT-DSINDX) showing DSN-by-member for selected    "
say "                libraries of selected users of the system.  See the HELP  "
say "                text for FINDLIBS for further details.                    "
say "                                                                          "
say "  Syntax:   "ex_nam"  FROM      xrftbl                          (Required)"
say "                      ISPTLIB   libin                           (Required)"
say "                                                                          "
say "            xrftbl    names the table containing the member-to-dataset    "
say "                      crossreference as generated by FINDLIBS.            "
say "                                                                          "
say "            libin     names the ISPF table library containing <xrftbl>.   "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        NOUPDT:   by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the execution   "
say "                  into REXX TRACE Mode.                                   "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( BRANCH  TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*   ISPF assets follow immediately
))) PLIB     PARMS    Get missing required parms
)ATTR
  % TYPE( TEXT  )  INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT  )  INTENS( LOW  ) SKIP( ON )
  { TYPE( TEXT  )  INTENS( HIGH )           COLOR( YELLOW )
  _ TYPE( INPUT )  INTENS( LOW  )           CAPS( ON )
  ! TYPE( INPUT )  INTENS( HIGH )
)BODY EXPAND(||)
{|-|% PARM Input {|-|
%COMMAND ===>_ZCMD
                                                              %SCROLL ===>_ZAMT+
+
+     Table Library ===>!isptlib                                    +(ISPTLIB)
+
+        Table Name ===>!@xrf@   +
+
)INIT
   .HELP  = PARMSH
)PROC
)END
))) PLIB     PARMSH   HELP for PARMS
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH )  SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  )  SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH )  SKIP( ON )
  { TYPE( OUTPUT ) INTENS( LOW  )  SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||)
%TUTORIAL |-| PARM Input |-| TUTORIAL
%Next Selection ===>_ZCMD

+
}hlptxt                                                                        }
)AREA HLPTXT
+
+    SHOWLIBS needs two parameters in order to complete its processing:
     (1) the%library (DSN)+where the cross-reference table can be found, and
     (2) the%member name+of the cross-reference table in that library.
+
     One or both were missing at process-start.  Enter any missing information.
+
     The library name should be fully-qualified and unquoted.
+
     To decline proceeding,%END+or%PF3+to exit.
+
)PROC
  &ZUP   = PARMSH
  &ZCONT = PARMSH
)END
))) PLIB     MBRLIST   Show DS-IDs for each membername
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
  ¬ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON ) JUST( RIGHT )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%|-| Member-DS Cross-Reference +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
                                                               As Of!asof      +
+V Membernm   Count  DS indexes---------------                %PF1 for HELP    +
)MODEL ROWS( SCAN )
_z!dsmbr      ¬dsct+@dsindx
)INIT
  .ZVARS = '(SEL)'
  .HELP = MBRLISTH
)REINIT
)PROC
  IF (.PFKEY = 'PF05')
      &PFKEY = 'F5'
      .RESP = END
)END
))) PLIB     MBRLISTH  HELP for MBRLIST
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
  } AREA( SCRL   ) EXTEND( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Member-DS Cross-Reference |-| TUTORIAL
%Next Selection ===>_ZCMD

}hlptxt                                                                        }
)AREA HLPTXT
+
+   Panel MBRLIST shows each member with a list of indicators that map
+   back to dataset names.  It supports two line functions (%V S+) and
+   three commands (%L SHOW LIBS+).
+
+   Enter%V+next to a membername to see the translation from indicator to
+   actual DSN.
+
+   Enter%S+to exercise%KVW+against the member. %KVW+will attempt to show all
+   occurrences of that membername within all the datasets for which there is
+   information.  It is possible that there will be too many datasets for a
+   given membername, and allocation will be refused.  The allocation limit is
+   a locally-set variable.  See the HELP-text for SHOWLIBS for more
+   information.
+
+   Enter%L+(Locate) plus a membername on the command line, and the display
+   will be positioned to that member if it exists, or to the next available
+   membername.
+
+   Enter%SHOW+on the command line, specifying either%USERS+or%TYPES+to display
+   the list of%userids+or%dataset types+that were used to produce this
+   cross-reference table.
+
+   To see the%entire+inventory of datasets, enter%LIBS+on the command line.
+
)PROC
  &ZUP   = MBRLISTH
  &ZCONT = MBRLISTH
)END
))) PLIB     DSDISPL   Show the translated Datasetnames
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON ) CAPS( OFF )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%|-| Datasets associated with!dsmbr       + +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
+V -ID-  Datasetname                                          %PF1 for HELP    +
)MODEL
_z@dsid+!tmpdsn
)INIT
  .ZVARS = '(SEL)'
  .HELP = DSDISPLH
)REINIT
)PROC
  IF (.PFKEY = 'PF05')
      &PFKEY = 'F5'
      .RESP = END
)END
))) PLIB     DSDISPLH  HELP for DSDISPL
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON ) CAPS( OFF )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Datasets associated with!dsmbr       + |-| TUTORIAL
%Next Selection ===>_ZCMD

+
+   Panel DSDISPL shows the datasetnames associated with!dsmbr2
+   or it shows the entire inventory if%LIBS+was requested.
+
+   Select any line to see the directory of the entire dataset.
+
)PROC
  &ZUP   = DSDISPLH
  &ZCONT = DSDISPLH
)END
))) PLIB     DSPUSER   Display USERTBL
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
)BODY EXPAND(||)
%|-| Display USERTBL +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
                                                            +Table name!@tbl@
+  Userid                                                    %PF1 for HELP
)MODEL
+ !userid  +
)INIT
  .HELP = DSPUSERH
)REINIT
)PROC
  IF (.PFKEY = 'PF05')
      &PFKEY = 'F5'
      .RESP = END
)END
))) PLIB     DSPUSERH  HELP for DSPUSER
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||)
%TUTORIAL |-| Display USERTBL |-| TUTORIAL
%Next Selection ===>_ZCMD

+
+   USERIDs are used to filter dataset names.  If a given USERID is on the
+   table, that user's datasets are inventoried for downstream processing:
+   specifically, they are later filtered by TYPE.
+
+   This table is 'display only'.
+
)PROC
  &ZUP   = DSPUSERH
  &ZCONT = DSPUSERH
)END
))) PLIB     DSPTYPE   Display TYPETBL
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
)BODY EXPAND(||)
%|-| Display TYPETBL +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
                                                             Table name!@tbl@
+  Type                                                       %PF1 for HELP
)MODEL
+ !type
)INIT
  .HELP = DSPTYPEH
)REINIT
)PROC
  IF (.PFKEY = 'PF05')
      &PFKEY = 'F5'
      .RESP = END
)END
))) PLIB     DSPTYPEH  HELP for DSPTYPE
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||)
%TUTORIAL |-| Display TYPETBL |-| TUTORIAL
%Next Selection ===>_ZCMD

+
+   TYPEs are used to filter dataset names.  Datasets that end with any
+   character string among the list of TYPEs in this table will be selected for
+   further processing.  Mismatched datasets are ignored.
+
+   The follow-on processing for selected datasets is to acquire a member list
+   and associate each member to its dataset name.  Finally, the compiled list
+   of member names is presented for selection.  For member names that appear in
+   more than one dataset, all the associated datasets are then presented for
+   further selection.
+
+   This table is 'display only'.
+
)PROC
  &ZUP   = DSPTYPEH
  &ZCONT = DSPTYPEH
)END
*/
