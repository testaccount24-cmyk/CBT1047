/* REXX    DIRSTATS   Read directory details directly and return via the
                      stack.
           Use '(routine name)  ?' for HELP-text.

           Written by (probably) Alastair Gray

     Impact Analysis
.    SYSEXEC   TRAPOUT

     Modification History
     20030707 fxc fixed problem of member-without-stats blowing up in
                  BJ_JULCONV;
     20210421 fxc rigged to do just one member
     20230328 fxc if created/changed is blank, no conversion;
     20230726 fxc adjust HELP;
     20240412 fxc chgd format of output line (q.v.);
     20240412 fxc change DUMP_QUEUE to quiet;
     20241124 fxc allow multiple members;
     20250123 fxc better HELP-text;

*/ arg argline
address TSO                            /* REXXSKEL ver.20230722      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
call B_SPIN_DIR                        /* Extract directory blocks  -*/

if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit 0                                 /*@ DIRSTATS                  */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse var info dsn mbr
   if dsn = "" then do
      helpmsg = "DSN is required."
      call HELP                        /* ...and don't come back    -*/
      end

   "Alloc Fi(PDS) Da("dsn") Shr Reuse ",
                 "RECFM(F) DSORG(PS) LRECL(256) BLKSIZE(256)"
   "ExecIO * DiskR PDS (Stem dir. Finis)"   /* read PDS directory     */
   "FREE FI(PDS)"

return                                 /*@ A_INIT                    */
/*
   Read and interpret each directory block
.  ----------------------------------------------------------------- */
B_SPIN_DIR:                            /*@                           */
   bb_tv = trace()                     /* what setting at entry ?    */
   if branch then call BRANCH
   address TSO

   Do blk = 1 to dir.0
      usedbytes = C2d(Substr(dir.blk,1,2))
      index = 3                             /* skip past used bytes   */
      Do While index < usedbytes
         If Substr(dir.blk,index,8) = "FFFFFFFFFFFFFFFF"x Then
            return
                                     rc = Trace("O"); rc = trace(bb_tv)
         pds2name = Substr(dir.blk,index,8) /* member name            */
         index = index + 11                 /* skip past name and ttr */
         pds2indc = Substr(dir.blk,index,1)
         len   = Bitand(pds2indc,"1F"x)     /* isolate user data leng */
         userlen = C2d(len) * 2             /* halfwords to bytes     */
         call BI_ISOLATE_UDATA         /* Interpret data            -*/

         index = index + userlen + 1        /* skip past user data    */
      End                              /* while                      */
   End                                 /* blk                        */

return                                 /*@ B_SPIN_DIR                */
/*
   Parse out all the datapoints for this member.  If only a single
   member has been requested, this may be skipped for all other
   members.
   Queue the data.
.  ----------------------------------------------------------------- */
BI_ISOLATE_UDATA:                      /*@                           */
   if branch then call BRANCH
   address TSO

   if mbr <> "" then,
      if WordPos( pds2name,mbr ) = 0 then return   /* not the member */
/*    if pds2name <> mbr then return      this is not the member     */

         userdata = Substr(dir.blk,index,userlen) /* get userdata     */
         bits  = x2b(C2x(Substr(userdata,1,1)))

         if userdata <> "" then do
            If (Substr(bits,1,1) = "1") Then
               Alias = "*Alias"
            Else
               Alias = Right(" ",6)

            vr = C2d(Substr(userdata,2,1))
            if vr > 0 then do
               parse var userdata  ,
                         3  mo  4,
                         6  created ,
                        10  changed ,
                        14  chnghrs ,
                        15  chngmin ,
                        16  size ,
                        18  init ,
                        20  mod ,
                        22  id  30
               mo      = C2D(mo)

               created = C2X(created)
               date    = Left(created,7)
               Call BJ_JULCONV
               created = date

               changed = C2X(changed)
               date    = Left(changed,7)
               Call BJ_JULCONV
               changed = date

               chnghrs = C2X(chnghrs)
               chngmin = C2X(chngmin)
               chngtim = chnghrs":"chngmin

               size    = C2D(size)
               init    = C2D(init)
               mod     = C2D(mod)
               end
            else parse value "Stats?" with alias vr mo created changed ,
                                           chngtim size init mod id
            end                        /* userdata exists            */
         else parse value "Stats?" with alias vr mo created changed ,
                                        chngtim size init mod id

         display = Right(vr,2,"0")"."Right(mo,2,"0"),
                   Left(created,8) Left(changed,8),
                   chngtim Right(size,5) Right(init,5) Right(mod,5) id

         If created = "" Then
            queue pds2name alias
         Else
            queue pds2name alias display
/* mbr <alias> vv.mm cred chgd chgt size init mod uid                */

return                                 /*@ BI_ISOLATE_UDATA          */
/*
   Date arrives as 0093224 or 0103187.  The 2nd byte is the century:
   0 = 19xx, 1 = 20xx.
.  ----------------------------------------------------------------- */
BJ_JULCONV:                                 /* convert J to S        */

   if date = '' then return
   parse var date 2 cent 3 juldt
   date = Date("S",juldt,"J")          /* convert to S               */

return                                 /*@ BJ_JULCONV                */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)             /* predictable size           */

say "  "ex_nam"      reads the directory of a PDS or PDSE directly and queues  "
say "                the translated data.  This can be used to retrieve the    "
say "                ISPF statistics for one or all members.                   "
say "                                                                          "
say "  Syntax:   "ex_nam"  dsn                                       (Required)"
say "                      mbr                                                 "
say "                                                                          "
say "            dsn       a TSO-format datasetname to be examined.  The       "
say "                      dataset should be PDS or PDSE.                      "
say "                                                                          "
say "            mbr       the member to be displayed.  If not specified, ALL  "
say "                      members are reported.                               "
say "                                                                          "
say "   For each member specified or implied, a line of data is returned on the"
say "   queue or displayed at the terminal.  The returned line(s) are composed "
say "   of:                                                                    "
say ".  mbrname <tag> vv.mm cre-date chg-date chg-time size init mod uid       "
say ".  <tag> may or may not be present.  If present, it will be either        "
say "   '*Alias' or 'Stats?' and may be shifted to uppercase.                  "
  "NEWSTACK"; pull; "CLEAR"; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        BRANCH    show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv  will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example                                                            "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
